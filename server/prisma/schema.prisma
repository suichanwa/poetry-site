datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  name       String    
  password   String
  avatar     String?
  bio        String?
  poems      Poem[]
  mangas     Manga[]    // Add this relation
  comments   Comment[]
  likes      Like[]
  bookmarks  Bookmark[]
  followers  Follow[]   @relation("followers")
  following  Follow[]   @relation("following")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdCommunities Community[] @relation("CommunityCreator")
  moderatedCommunities Community[] @relation("CommunityModerators")
  joinedCommunities Community[] @relation("CommunityMembers")
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Poem {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  file        String?
  formatting  Json?      // Add this line
  viewCount   Int        @default(0)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  tags        Tag[]      @relation("PoemToTag")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  community   Community? @relation("CommunityPosts", fields: [communityId], references: [id])
  communityId Int?
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  poems     Poem[]   @relation("PoemToTag")
  mangas    Manga[]  @relation("MangaToTag")  // Add this relation
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem     @relation(fields: [poemId], references: [id])
  poemId    Int
  likes     Like[]   // Add this line to establish the opposite relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem?    @relation(fields: [poemId], references: [id])
  poemId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  createdAt DateTime @default(now())
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem     @relation(fields: [poemId], references: [id])
  poemId    Int
  createdAt DateTime @default(now())

  @@unique([userId, poemId])
}

model Manga {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  chapters    Chapter[]
  tags        Tag[]     @relation("MangaToTag")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Chapter {
  id        Int      @id @default(autoincrement())
  number    Int
  title     String?
  manga     Manga    @relation(fields: [mangaId], references: [id])
  mangaId   Int
  pages     Page[]
  createdAt DateTime @default(now())
}

model Page {
  id        Int      @id @default(autoincrement())
  number    Int
  imageUrl  String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
  createdAt DateTime @default(now())
}

model Community {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  avatar      String?
  banner      String?
  topics      Topic[]   // Add topics relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation("CommunityCreator", fields: [creatorId], references: [id])
  creatorId   Int
  members     User[]    @relation("CommunityMembers")
  moderators  User[]    @relation("CommunityModerators")
  rules       Rule[]
  isPrivate   Boolean   @default(false)
}

model Rule {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  community    Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId  Int
  createdAt    DateTime  @default(now())
}

// Add Thread and ThreadComment models
model Thread {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     Int
  author      User     @relation("ThreadAuthor", fields: [authorId], references: [id])
  authorId    Int
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  viewCount   Int      @default(0)
  comments    ThreadComment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ThreadComment {
  id          Int      @id @default(autoincrement())
  content     String
  thread      Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId    Int
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  
  // For nested comments
  parentId    Int?
  parent      ThreadComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     ThreadComment[] @relation("CommentReplies")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Topic {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  threads     Thread[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPinned    Boolean   @default(false)
  isLocked    Boolean   @default(false)
  createdBy   User      @relation("TopicCreator", fields: [createdById], references: [id])
  createdById Int
}