datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  name                 String
  password             String
  avatar               String?
  bio                  String?
  poems                Poem[]
  mangas               Manga[]
  comments             Comment[]
  banner               String?
  likes                Like[]
  subscription  Subscription?
  bookmarks            Bookmark[]
  followers            Follow[]        @relation("followers")
  following            Follow[]        @relation("following")
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  createdCommunities   Community[]     @relation("CommunityCreator")
  moderatedCommunities Community[]     @relation("CommunityModerators")
  joinedCommunities    Community[]     @relation("CommunityMembers")
  authoredThreads      Thread[]        @relation("ThreadAuthor")
  threadComments       ThreadComment[]
  createdTopics        Topic[]         @relation("TopicCreator")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications    Notification[]  @relation("SentNotifications")
  notificationPreferences NotificationPreferences?
  communityPosts       CommunityPost[] 
  avatarStyle         String?         // For storing card style preference
  avatarAnimation     String?         // For storing animation type
  isAnimatedAvatar    Boolean         @default(false)
  customCardStyle     Json?           // For storing card style settings
  themeSettings       Json?           // Store custom colors and seasonal preferences
  seasonalThemeEnabled Boolean         @default(false)
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Poem {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  file        String?
  formatting  Json?
  viewCount   Int        @default(0)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  tags        Tag[]      @relation("PoemToTag")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  community   Community? @relation("CommunityPosts", fields: [communityId], references: [id])
  communityId Int?
  notifications Notification[] // Add this relation
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  poems     Poem[]   @relation("PoemToTag")
  mangas    Manga[]  @relation("MangaToTag") // Add this relation
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem     @relation(fields: [poemId], references: [id])
  poemId    Int
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notifications Notification[] // Add this relation
  communityPost   CommunityPost? @relation(fields: [communityPostId], references: [id])
  communityPostId Int?
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem?    @relation(fields: [poemId], references: [id])
  poemId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  createdAt DateTime @default(now())
  communityPost   CommunityPost? @relation(fields: [communityPostId], references: [id])
  communityPostId Int?
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem     @relation(fields: [poemId], references: [id])
  poemId    Int
  createdAt DateTime @default(now())

  @@unique([userId, poemId])
}

model Manga {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  chapters    Chapter[]
  tags        Tag[]     @relation("MangaToTag")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Chapter {
  id        Int      @id @default(autoincrement())
  number    Int
  title     String?
  manga     Manga    @relation(fields: [mangaId], references: [id])
  mangaId   Int
  pages     Page[]
  createdAt DateTime @default(now())
}

model Page {
  id        Int      @id @default(autoincrement())
  number    Int
  imageUrl  String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
  createdAt DateTime @default(now())
}

model Community {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  avatar      String?
  banner      String?
  topics      Topic[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation("CommunityCreator", fields: [creatorId], references: [id])
  creatorId   Int
  members     User[]    @relation("CommunityMembers")
  moderators  User[]    @relation("CommunityModerators")
  rules       Rule[]
  isPrivate   Boolean   @default(false)
  posts       Poem[]    @relation("CommunityPosts")
  notifications Notification[] // Add this relation
    communityPosts CommunityPost[] // Add this line for community relation
}

model Rule {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  createdAt   DateTime  @default(now())
}

model Thread {
  id          Int             @id @default(autoincrement())
  title       String
  content     String
  topic       Topic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     Int
  author      User            @relation("ThreadAuthor", fields: [authorId], references: [id])
  authorId    Int
  isPinned    Boolean         @default(false)
  isLocked    Boolean         @default(false)
  viewCount   Int             @default(0)
  comments    ThreadComment[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  notifications Notification[] // Add this relation
}

model ThreadComment {
  id       Int    @id @default(autoincrement())
  content  String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId Int
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int

  // For nested comments
  parentId Int?
  parent   ThreadComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  ThreadComment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  threads     Thread[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPinned    Boolean   @default(false)
  isLocked    Boolean   @default(false)
  createdBy   User      @relation("TopicCreator", fields: [createdById], references: [id])
  createdById Int
}

enum NotificationType {
  MENTION
  LIKE
  COMMENT
  FOLLOW
  SYSTEM
  THREAD_REPLY
  COMMUNITY_INVITE
}

model Notification {
  id          Int             @id @default(autoincrement())
  type        NotificationType
  content     String
  link        String?
  isRead      Boolean         @default(false)
  
  recipient   User            @relation("ReceivedNotifications", fields: [recipientId], references: [id])
  recipientId Int
  
  sender      User?           @relation("SentNotifications", fields: [senderId], references: [id])
  senderId    Int?
  
  poemId      Int?
  poem        Poem?           @relation(fields: [poemId], references: [id])
  
  commentId   Int?
  comment     Comment?        @relation(fields: [commentId], references: [id])
  
  communityId Int?
  community   Community?      @relation(fields: [communityId], references: [id])
  
  threadId    Int?
  thread      Thread?         @relation(fields: [threadId], references: [id])

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([recipientId])
  @@index([type])
  @@index([isRead])
}

model NotificationPreferences {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  emailLikes    Boolean  @default(false)
  emailComments Boolean  @default(false)
  emailFollows  Boolean  @default(false)
  pushLikes     Boolean  @default(false)
  pushComments  Boolean  @default(false)
  pushFollows   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CommunityPost {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  images      String[]  // Array of image URLs
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likes       Like[]
  comments    Comment[]

  @@index([communityId])
  @@index([authorId])
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

enum BillingPeriod {
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
}

model Subscription {
  id            Int             @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  tier          SubscriptionTier @default(FREE)
  billingPeriod BillingPeriod?
  price         Float?
  startDate     DateTime       @default(now())
  endDate       DateTime?
  status        String         @default("ACTIVE") // ACTIVE, CANCELLED, EXPIRED
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model DigitalProduct {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  price         Float
  type          ProductType
  coverImage    String?
  authorId      Int
  author        User      @relation(fields: [authorId], references: [id])
  sales         Sale[]
  chapters      Chapter[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}